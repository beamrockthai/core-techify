const Employee = require("../../EmployeeRe/Model/Employee.model");
const Job = require("../../Jop/Model/job.model"); // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° import Job

// üîπ ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏á‡∏≤‡∏ô (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô)
exports.registerForJob = async (req, res) => {
  try {
    if (!req.user || !req.user.id) {
      return res.status(401).json({ success: false, message: "Unauthorized" });
    }

    const {
      jobId,
      profileImage,
      attachedFiles,
      personalInfo,
      educationHistory,
      workHistory,
      specialSkills,
    } = req.body;
    const userId = req.user.id;

    console.log("üìå Received userId for registration:", userId);
    console.log("üìå Received jobId:", jobId);
    console.log("üìå Full Request Body:", req.body);

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Job ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á‡πÑ‡∏´‡∏°
    const jobExists = await Job.findByPk(jobId);
    if (!jobExists) {
      console.error("‚ùå Job not found in DB for id:", jobId);
      return res.status(404).json({ success: false, message: "Job not found" });
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏á‡∏≤‡∏ô‡∏ô‡∏µ‡πâ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
    const existingApplication = await Employee.findOne({
      where: { userId, jobId },
    });
    if (existingApplication) {
      console.log("‚ùå User already applied for this job:", existingApplication);
      return res.status(400).json({
        success: false,
        message: "You have already applied for this job",
      });
    }

    // ‚úÖ ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏á‡∏≤‡∏ô ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
    const application = await Employee.create({
      userId,
      jobId,
      profileImage,
      attachedFiles,
      personalInfo,
      educationHistory,
      workHistory,
      specialSkills,
    });

    console.log("‚úÖ Application submitted successfully:", application);

    res.status(201).json({ success: true, data: application });
  } catch (error) {
    console.error("‚ùå Error in registerForJob:", error);
    res.status(500).json({ success: false, message: error.message });
  }
};

// üîπ ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏±‡∏Ñ‡∏£
exports.getRegisterJob = async (req, res) => {
  try {
    if (!req.user || !req.user.id) {
      return res.status(401).json({ success: false, message: "Unauthorized" });
    }

    const userId = req.user.id; // ‡∏î‡∏∂‡∏á `userId` ‡∏à‡∏≤‡∏Å Token
    const applications = await Employee.findAll({
      where: { userId },
      include: [
        {
          model: Job,
          attributes: ["id", "JobName", "Description", "Location"], // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏±‡∏Ñ‡∏£
        },
      ],
    });

    res.status(200).json({ success: true, data: applications });
  } catch (error) {
    console.error("‚ùå Error in getRegisterJob:", error.message);
    res.status(500).json({ success: false, message: error.message });
  }
};

// üîπ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£ (Admin ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)
exports.updateApplicationStatus = async (req, res) => {
  try {
    if (!req.user || req.user.role !== "admin") {
      // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡πÉ‡∏´‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô
      return res.status(403).json({
        success: false,
        message: "Forbidden: Only admins can update applications",
      });
    }

    const { status } = req.body;
    const applicationId = req.params.id;

    const application = await Employee.findByPk(applicationId);
    if (!application) {
      return res
        .status(404)
        .json({ success: false, message: "Application not found" });
    }

    application.status = status;
    await application.save();

    res.status(200).json({ success: true, data: application });
  } catch (error) {
    console.error("‚ùå Error in updateApplicationStatus:", error.message);
    res.status(500).json({ success: false, message: error.message });
  }
};

// üîπ **‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á**
exports.cancelRegisterJob = async (req, res) => {
  try {
    if (!req.user || !req.user.id) {
      return res.status(401).json({ success: false, message: "Unauthorized" });
    }

    const userId = req.user.id;
    const applicationId = req.params.id;

    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÉ‡∏ö‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
    const application = await Employee.findOne({
      where: { id: applicationId, userId },
    });

    if (!application) {
      return res.status(404).json({
        success: false,
        message: "Application not found or unauthorized",
      });
    }

    // ‡∏•‡∏ö‡πÉ‡∏ö‡∏™‡∏°‡∏±‡∏Ñ‡∏£
    await application.destroy();

    res
      .status(200)
      .json({ success: true, message: "Application canceled successfully" });
  } catch (error) {
    console.error("‚ùå Error in cancelRegisterJob:", error.message);
    res.status(500).json({ success: false, message: error.message });
  }
};
