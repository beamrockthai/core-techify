import React, { useState, useEffect } from "react";
import { getJobs } from "../api/jobApi";
import { useNavigate } from "react-router-dom";
import Notification from "../components/Notification";
// import Banner from "../components/Banner";

const RegisterJob = () => {
  const [tableData, setTableData] = useState([]);
  const [filteredData, setFilteredData] = useState([]);
  const [searchQuery, setSearchQuery] = useState("");
  const [error, setError] = useState(null);
  const [showPrivacyPolicy, setShowPrivacyPolicy] = useState(true);

  const navigate = useNavigate(); // ‚úÖ ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏´‡∏ô‡πâ‡∏≤

  useEffect(() => {
    const fetchJobs = async () => {
      try {
        const response = await getJobs();
        console.log("üìå API Response:", response);

        const jobs = Array.isArray(response) ? response : response?.data || [];
        setTableData(jobs);
        setFilteredData(jobs); // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
      } catch (error) {
        console.error("‚ùå Error fetching jobs:", error);
        setError(error.message);
      }
    };

    fetchJobs();
  }, []);

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
  const handleSearch = (event) => {
    const query = event.target.value.toLowerCase();
    setSearchQuery(query);

    if (query === "") {
      setFilteredData(tableData); // ‡∏ñ‡πâ‡∏≤‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ß‡πà‡∏≤‡∏á ‡πÉ‡∏´‡πâ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    } else {
      setFilteredData(
        tableData.filter((job) => job.JobName.toLowerCase().includes(query))
      );
    }
  };

  // ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° "‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏á‡∏≤‡∏ô"
  const handleApply = (jobId) => {
    // ‡∏™‡∏±‡πà‡∏á navigate ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏° + jobId
    navigate(`/registerFrom/${jobId}`);
  };

  return (
    <div className="bg-gray-100 min-h-screen py-8 px-4 flex flex-col font-sans">
      <div className="container mx-auto">
        {/* ‚úÖ ‡πÅ‡∏™‡∏î‡∏á Popup ‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß */}
        {showPrivacyPolicy && (
          <Notification onClose={() => setShowPrivacyPolicy(false)} />
        )}
        {/* ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ä‡πà‡∏≠‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏á‡∏≤‡∏ô */}
        <div className="mb-4 flex justify-between items-center">
          <h2 className="text-lg font-semibold text-gray-700">
            üìã ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
          </h2>
          <input
            type="text"
            placeholder="üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡∏á‡∏≤‡∏ô..."
            value={searchQuery}
            onChange={handleSearch}
            className="px-4 py-2 border border-gray-300 rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
          />
        </div>

        {error ? (
          <p className="text-red-500 text-center text-lg">{error}</p>
        ) : tableData.length === 0 ? (
          <p className="text-gray-500 text-center text-lg">‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</p>
        ) : (
          <div className="overflow-x-auto ">
            <table className="table-auto w-full bg-white shadow-md rounded-lg overflow-hidden ">
              <thead>
                <tr className="bg-gray-200 text-gray-700 text-left">
                  <th className="px-6 py-3 font-semibold">#</th>
                  <th className="px-6 py-3 font-semibold">‡∏ä‡∏∑‡πà‡∏≠‡∏á‡∏≤‡∏ô</th>
                  <th className="px-6 py-3 w-1/3 font-semibold">‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î</th>
                  <th className="px-6 py-3 font-semibold">‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà</th>
                  <th className="px-6 py-3 text-center font-semibold">‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</th>
                  <th className="px-6 py-3 text-center font-semibold">
                    ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏á‡∏≤‡∏ô
                  </th>
                </tr>
              </thead>
              <tbody>
                {filteredData.length === 0 ? (
                  <tr>
                    <td
                      colSpan="6"
                      className="text-center py-4 text-gray-500 font-semibold"
                    >
                      ‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
                    </td>
                  </tr>
                ) : (
                  filteredData.map((job, index) => {
                    const isClosed = !job.IsActive;

                    return (
                      <tr key={index} className="hover:bg-gray-100 border-b">
                        <td className="px-6 py-3">{index + 1}</td>
                        <td className="px-6 py-3 font-semibold">
                          {job.JobName}
                        </td>
                        <td className="px-6 py-3 text-gray-600 whitespace-pre-line font-semibold">
                          {job.Description}
                        </td>
                        <td className="px-6 py-3">{job.Location}</td>
                        <td className="px-6 py-3 text-center">
                          <span
                            className={`px-3 py-1 rounded-full text-sm font-semibold ${
                              isClosed
                                ? "bg-red-500 text-white"
                                : "bg-green-500 text-white"
                            }`}
                          >
                            {isClosed ? "‡∏õ‡∏¥‡∏î‡∏£‡∏±‡∏ö‡∏™‡∏°‡∏±‡∏Ñ‡∏£" : "‡πÄ‡∏õ‡∏¥‡∏î‡∏£‡∏±‡∏ö‡∏™‡∏°‡∏±‡∏Ñ‡∏£"}
                          </span>
                        </td>
                        <td className="px-6 py-3 text-center">
                          <button
                            className={`px-5 py-2 font-semibold text-white rounded-lg transition-all transform shadow-lg ${
                              isClosed
                                ? "bg-gray-400 cursor-not-allowed"
                                : "bg-gradient-to-r from-blue-500 to-blue-700 hover:scale-105 hover:shadow-xl"
                            }`}
                            disabled={isClosed}
                            onClick={() => !isClosed && handleApply(job.id)}
                          >
                            {isClosed ? "‡∏õ‡∏¥‡∏î‡∏£‡∏±‡∏ö‡∏™‡∏°‡∏±‡∏Ñ‡∏£" : "‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏á‡∏≤‡∏ô"}
                          </button>
                        </td>
                      </tr>
                    );
                  })
                )}
              </tbody>
            </table>
          </div>
        )}
      </div>

      {/* ‚úÖ Banner ‡∏≠‡∏¢‡∏π‡πà‡∏•‡πà‡∏≤‡∏á‡∏™‡∏∏‡∏î‡πÅ‡∏•‡∏∞ Responsive
      <div className="mt-12 w-full px-15 left-0 bottom-0">
        <Banner />
      </div> */}
    </div>
  );
};

export default RegisterJob;
